name: Workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - "README.md"

env:
  AWS_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
  ECR_LOGIN_URL: ${{ secrets.AWS_ECR_LOGIN_URI }}
  IMAGE_TAG: latest
  AWS_REGION: ${{ secrets.AWS_REGION }}

jobs:
  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint Code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: sudo apt-get update && sudo apt-get install -y jq unzip

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, Tag, and Push Docker Image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

  Continuous-Deployment:
    name: Continuous Deployment
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Print Encoded Secrets (For Debugging)
        run: |
          echo "AWS_ACCESS_KEY (encoded): $(echo -n $AWS_ACCESS_KEY | base64)"
          echo "AWS_SECRET_KEY (encoded): $(echo -n $AWS_SECRET_KEY | base64)"
          echo "ECR_LOGIN_URL (encoded): $(echo -n $ECR_LOGIN_URL | base64)"
          echo "REPOSITORY_NAME (encoded): $(echo -n $REPOSITORY_NAME | base64)"
          echo "IMAGE_TAG (encoded): $(echo -n $IMAGE_TAG | base64)"
          echo "AWS_REGION (encoded): $(echo -n $AWS_REGION | base64)"

      - name: Pull Docker Image from Amazon ECR
        env:
          ECR_LOGIN_URL: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker pull $ECR_LOGIN_URL/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Run Docker Image to serve users
        # env:
        #   AWS_ACCESS_KEY: ${{ steps.login-ecr.outputs.accessKeyId }}
        #   AWS_SECRET_KEY: ${{ steps.login-ecr.outputs.secretAccessKey }}
        #   REPOSITORY_NAME: ${{ secrets.ECR_REPOSITORY_NAME }}
        #   REPOSITORY_NAME_B: ${{ steps.login-ecr.outputs.repository }}
        #   ECR_LOGIN_URL: ${{ steps.login-ecr.outputs.registry }}
        #   IMAGE_TAG: latest
        #   AWS_REGION: ${{ secrets.AWS_REGION }}
        run: |
          echo "ECR_LOGIN_URL=$ECR_LOGIN_URL"
          echo "REPOSITORY_NAME=$REPOSITORY_NAME"
          echo "IMAGE_TAG=$IMAGE_TAG"
          echo "AWS_REGION=$AWS_REGION"

          docker run -d -p 8080:8080 --ipc="host" --name "$REPOSITORY_NAME" \
          -e AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY" \
          -e AWS_SECRET_ACCESS_KEY="$AWS_SECRET_KEY" \
          -e AWS_REGION="$AWS_REGION" \
          "$ECR_LOGIN_URL/$REPOSITORY_NAME:$IMAGE_TAG"

      - name: Clean previous images and containers
        id: cleanup
        run: |
          docker system prune -f
